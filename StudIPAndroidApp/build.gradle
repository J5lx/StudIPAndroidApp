/*
 * Copyright (c) 2014 ELAN e.V.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Public License v3.0
 * which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/gpl.html
 */
import java.text.SimpleDateFormat

def versionMajor = 0 //prod
def versionMinor = 9
def versionPatch = 8
def versionBuild = 0

def versionMajorBeta = 0 //beta
def versionMinorBeta = 9
def versionPatchBeta = 6
def versionBuildBeta = 0

buildscript {

  repositories {
    maven { url 'https://maven.fabric.io/repo' }
  }
  dependencies {
    classpath 'io.fabric.tools:gradle:1.15.2'
  }

}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
  maven { url 'https://maven.fabric.io/repo' }
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
  compile fileTree(dir: 'libs', include: '*.jar')
  // Crashlytics Kit
  compile('com.crashlytics.sdk.android:crashlytics:2.2.1@aar') {
    transitive = true
  }
  compile 'com.android.support:support-v4:21.0.3'
  compile 'com.android.support:appcompat-v7:20.0.0'
  compile 'com.android.support:cardview-v7:21.0.0'
  compile 'com.android.support:recyclerview-v7:21.0.0'
  compile 'org.lucasr.twowayview:core:1.0.0-SNAPSHOT@aar'
  compile 'org.lucasr.twowayview:layouts:1.0.0-SNAPSHOT@aar'
  compile 'com.squareup.okhttp:okhttp:2.2.0'
  compile 'com.squareup.okhttp:okhttp-urlconnection:2.2.0'
  compile 'io.reactivex:rxandroid:0.24.0'
  compile 'com.squareup.retrofit:retrofit:1.9.0'
  compile 'com.squareup.retrofit:converter-jackson:1.9.0'
  compile 'com.fasterxml.jackson.core:jackson-databind:2.5.1'
  compile 'com.fasterxml.jackson.core:jackson-annotations:2.5.1'
  compile 'oauth.signpost:signpost-commonshttp4:1.2.1.2'
  compile 'oauth.signpost:oauth-signpost:1.2.1.2'
  compile 'oauth.signpost:signpost-core:1.2.1.2'
  compile project(':libs:signpost-retrofit')
  compile 'com.squareup.picasso:picasso:2.5.0'
  compile 'se.emilsjolander:stickylistheaders:2.5.2'
  compile 'com.google.guava:guava:18.0'
  compile 'com.mcxiaoke.volley:library:1.0.+@aar'
}

def buildTime() {
  def df = new SimpleDateFormat("yyyy-MM-dd HH:mm")
  df.setTimeZone(TimeZone.getTimeZone("CET"))
  return df.format(new Date())
}

android {

  testBuildType "staging"

  lintOptions {
    abortOnError false
  }

  compileSdkVersion 21
  buildToolsVersion "22.0.1"

  signingConfigs {
    release
  }

  //Read signing config from release.properties in root
  if (rootProject.file("release.properties").exists()) {
    def props = new Properties()
    props.load(new FileInputStream(rootProject.file("release.properties")))

    android.signingConfigs.release.storeFile rootProject.file(props.getProperty("keyStore"))
    android.signingConfigs.release.storePassword props.getProperty("keyStorePassword")
    android.signingConfigs.release.keyAlias props.getProperty("keyAlias")
    android.signingConfigs.release.keyPassword props.getProperty("keyAliasPassword")
  }

  defaultConfig {
    minSdkVersion 10
    targetSdkVersion 21

    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  productFlavors {
    beta {
      versionCode versionMajorBeta * 10000 + versionMinorBeta * 1000 + versionPatchBeta * 100 + versionBuildBeta
      versionName "${versionMajorBeta}.${versionMinorBeta}.${versionPatchBeta}-beta"
    }

    production {
      versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
      versionName "${versionMajor}.${versionMinor}.${versionPatch}"
    }
  }

  buildTypes {

    debug {
      buildConfigField "boolean", "USE_CRASHLYTICS", "false"

      // Database name configuration
      buildConfigField "String", "DATABASE", "\"studip_debug.db\""

      // SyncHelper threshold values
      buildConfigField "int", "COURSES_SYNC_THRESHOLD", "5000"; // 1h
      buildConfigField "int", "NEWS_SYNC_THRESHOLD", "5000"; // 1min
      buildConfigField "int", "CONTACTS_SYNC_THRESHOLD", "5000"; // 1min
      ext.enableCrashlytics = false
      versionNameSuffix '-DEBUG'
      debuggable = true
    }

    release {
      buildConfigField "boolean", "USE_CRASHLYTICS", "true"

      // Database name configuration
      buildConfigField "String", "DATABASE", "\"studip_encrypted.db\""

      // SyncHelper threshold values
      buildConfigField "int", "COURSES_SYNC_THRESHOLD", "3600000"; // 1h
      buildConfigField "int", "NEWS_SYNC_THRESHOLD", "60000"; // 1min
      buildConfigField "int", "CONTACTS_SYNC_THRESHOLD", "60000"; // 1min

      ext.enableCrashlytics = true
      versionNameSuffix '-RELEASE'
      debuggable = false
      signingConfig signingConfigs.release
      minifyEnabled = true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
    }

    staging {
      buildConfigField "boolean", "USE_CRASHLYTICS", "false"

      // Database name configuration
      buildConfigField "String", "DATABASE", "\"studip_staging.db\""

      // SyncHelper threshold values
      buildConfigField "int", "COURSES_SYNC_THRESHOLD", "3600000"; // 1h
      buildConfigField "int", "NEWS_SYNC_THRESHOLD", "60000"; // 1min
      buildConfigField "int", "CONTACTS_SYNC_THRESHOLD", "60000"; // 1min
      ext.enableCrashlytics = false
      versionNameSuffix '-STAGING'
      debuggable = false
      minifyEnabled = false
    }

    applicationVariants.all { variant ->
      variant.outputs.each { output ->
        def file = output.outputFile
        output.outputFile = new File(file.parent, file.name.replace(".apk",
            "-" + variant.productFlavors.versionCode + "-" + variant.name + ".apk"))
      }
    }

  }

  packagingOptions {
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
  }

}
